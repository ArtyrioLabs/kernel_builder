#!/usr/bin/env python3
import os
import subprocess
import logging
import shutil
from datetime import datetime
from telegram import Update, InputFile, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv
import requests
import psutil
import tempfile
import zipfile
from git import Repo

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
ESP_IP = os.getenv("ESP_IP")
ESP_ENABLED = os.getenv("ESP_ENABLED", "false").lower() == "true"  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
MAX_LOG_FILES = 10

PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
LOG_DIR = os.path.join(PROJECT_DIR, "logs")
os.makedirs(LOG_DIR, exist_ok=True)

def cleanup_old_logs():
    try:
        logs = sorted(os.listdir(LOG_DIR))
        while len(logs) > MAX_LOG_FILES:
            os.remove(os.path.join(LOG_DIR, logs.pop(0)))
    except Exception as e:
        logger.error(f"Error cleaning logs: {e}")

def send_to_esp8266(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ ESP8266 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    if not ESP_ENABLED or not ESP_IP:
        logger.info(f"ESP8266 disabled, message: {message}")
        return True
    
    max_retries = 3
    for attempt in range(max_retries):
        try:
            url = f"http://{ESP_IP}/display?text={requests.utils.quote(message)}"
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                logger.info(f"Sent to ESP8266: {message}")
                return True
        except Exception as e:
            logger.warning(f"ESP8266 send attempt {attempt + 1} failed: {e}")
            if attempt == max_retries - 1:
                logger.error(f"Failed to send to ESP8266 after {max_retries} attempts")
    return False

def check_esp8266_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ESP8266"""
    if not ESP_ENABLED or not ESP_IP:
        return False, "ESP8266 –æ—Ç–∫–ª—é—á–µ–Ω"
    
    try:
        response = requests.get(f"http://{ESP_IP}", timeout=3)
        return response.ok, "üü¢ Online" if response.ok else "üî¥ Offline"
    except Exception as e:
        return False, f"üî¥ Offline ({str(e)})"

async def setup_commands(application):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("build", "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É —è–¥—Ä–∞"),
        BotCommand("status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
        BotCommand("logs", "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤"),
        BotCommand("clean", "–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand("stopbuild", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä–∫—É"),
        BotCommand("lastzip", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ö–∏–≤ –ø—Ä–æ—à–∏–≤–∫–∏"),
        BotCommand("buildinfo", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–±–æ—Ä–∫–µ"),
        BotCommand("patchlist", "–°–ø–∏—Å–æ–∫ –ø–∞—Ç—á–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏"),
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã ESP8266 —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
    if ESP_ENABLED:
        esp_commands = [
            BotCommand("lsd", "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ SD-–∫–∞—Ä—Ç–µ ESP8266"),
            BotCommand("getfile", "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å SD-–∫–∞—Ä—Ç—ã ESP8266"),
            BotCommand("deletefile", "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ SD-–∫–∞—Ä—Ç–µ ESP8266"),
            BotCommand("uploadfile", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ SD-–∫–∞—Ä—Ç—É ESP8266"),
            BotCommand("clearlog", "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥ –Ω–∞ SD-–∫–∞—Ä—Ç–µ ESP8266"),
            BotCommand("sdinfo", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SD-–∫–∞—Ä—Ç–µ ESP8266"),
            BotCommand("rebootesp", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å ESP8266"),
            BotCommand("webui", "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ESP8266"),
        ]
        commands.extend(esp_commands)
    
    await application.bot.set_my_commands(commands)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    esp_status = "üü¢ –í–∫–ª—é—á–µ–Ω" if ESP_ENABLED else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
    welcome_msg = (
        "üîß *Build Monitor Bot*\n\n"
        f"*ESP8266:* {esp_status}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/build - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É —è–¥—Ä–∞\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/logs - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤\n"
        "/clean - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏\n"
        "/stopbuild - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä–∫—É\n"
        "/lastzip - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ö–∏–≤ –ø—Ä–æ—à–∏–≤–∫–∏\n"
        "/buildinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–±–æ—Ä–∫–µ\n"
        "/patchlist - –°–ø–∏—Å–æ–∫ –ø–∞—Ç—á–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    
    if ESP_ENABLED:
        welcome_msg += "\n\n*–ö–æ–º–∞–Ω–¥—ã ESP8266:*\n"
        welcome_msg += "/lsd - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ SD-–∫–∞—Ä—Ç–µ\n"
        welcome_msg += "/getfile <–∏–º—è> - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å SD-–∫–∞—Ä—Ç—ã\n"
        welcome_msg += "/deletefile <–∏–º—è> - –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ SD-–∫–∞—Ä—Ç–µ\n"
        welcome_msg += "/uploadfile - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ SD-–∫–∞—Ä—Ç—É\n"
        welcome_msg += "/clearlog - –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥ –Ω–∞ SD-–∫–∞—Ä—Ç–µ\n"
        welcome_msg += "/sdinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SD-–∫–∞—Ä—Ç–µ\n"
        welcome_msg += "/rebootesp - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å ESP8266\n"
        welcome_msg += "/webui - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ESP8266"
    
    await update.message.reply_text(welcome_msg, parse_mode='Markdown')
    send_to_esp8266("Bot Ready")

build_process = None

async def build_kernel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global build_process
    user = update.effective_user
    repo = Repo(PROJECT_DIR)
    commit = repo.head.commit.hexsha[:8]
    branch = repo.active_branch.name
    build_start = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    logger.info(f"Build requested by {user.full_name} (ID: {user.id}), git: {branch} {commit}, time: {build_start}")
    await update.message.reply_text(f"‚öôÔ∏è *–ó–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä–∫—É —è–¥—Ä–∞...*\nGit: `{branch}` `{commit}`\n–í—Ä–µ–º—è: {build_start}", parse_mode='Markdown')
    send_to_esp8266("Build Started")
    log_filename = f"build_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    log_path = os.path.join(LOG_DIR, log_filename)
    kernel_name = None
    image_path = None
    try:
        with open(log_path, 'w') as log_file:
            log_file.write(f"Build started by: {user.full_name} (ID: {user.id})\n")
            log_file.write(f"Git branch: {branch}\nGit commit: {commit}\nStart time: {build_start}\n\n")
            build_process = subprocess.Popen(
                ["./build.sh"],
                cwd=PROJECT_DIR,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            while True:
                output = build_process.stdout.readline()
                if output == '' and build_process.poll() is not None:
                    break
                if output:
                    log_file.write(output)
                    logger.info(output.strip())
                    if output.startswith("Using kernel name:"):
                        kernel_name = output.strip().split(":",1)[-1].strip()
                    elif output.strip().startswith("Kernel image:"):
                        image_path = output.strip().split(":",1)[-1].strip()
        build_end = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        with open(log_path, 'a') as log_file:
            log_file.write(f"\nBuild finished at: {build_end}\n")
        if build_process.returncode == 0:
            await update.message.reply_text(f"‚úÖ *–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*\nGit: `{branch}` `{commit}`\n–í—Ä–µ–º—è: {build_end}", parse_mode='Markdown')
            send_to_esp8266("Build Success")
            zip_msg = await pack_and_send_zip(context, update, kernel_name, image_path)
            await update.message.reply_text(zip_msg, parse_mode='Markdown')
            send_to_esp8266("Zip OK")
            with open(log_path, "rb") as f:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=InputFile(f, filename=log_filename),
                    caption=f"–õ–æ–≥ —Å–±–æ—Ä–∫–∏: {log_filename}"
                )
        else:
            await update.message.reply_text(f"‚ùå *–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!*\nGit: `{branch}` `{commit}`\n–í—Ä–µ–º—è: {build_end}", parse_mode='Markdown')
            send_to_esp8266("Build Failed")
            with open(log_path, "rb") as f:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=InputFile(f, filename=log_filename),
                    caption=f"–õ–æ–≥ –æ—à–∏–±–∫–∏: {log_filename}"
                )
    except subprocess.TimeoutExpired:
        error_msg = "üïí *–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏ (30 –º–∏–Ω—É—Ç)*"
        await update.message.reply_text(error_msg, parse_mode='Markdown')
        send_to_esp8266("Timeout Error")
    except Exception as e:
        error_msg = f"‚ö†Ô∏è *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:* {str(e)}"
        await update.message.reply_text(error_msg, parse_mode='Markdown')
        send_to_esp8266("Critical Error")
        logger.exception("Build failed")
    finally:
        build_process = None
        cleanup_old_logs()

async def pack_and_send_zip(context, update, kernel_name, image_path):
    try:
        anykernel_dir = os.path.join(PROJECT_DIR, "AnyKernel")
        zips_dir = os.path.join(PROJECT_DIR, "zips")
        os.makedirs(zips_dir, exist_ok=True)
        date_str = datetime.now().strftime('%Y%m%d_%H%M')
        zip_name = f"kernel-flashable-{kernel_name}_{date_str}.zip"
        zip_path = os.path.join(zips_dir, zip_name)
        with tempfile.TemporaryDirectory() as tmpdir:
            shutil.copytree(anykernel_dir, os.path.join(tmpdir, "AnyKernel"), dirs_exist_ok=True)
            ak_dir = os.path.join(tmpdir, "AnyKernel")
            if not image_path or not os.path.isfile(image_path):
                image_path = os.path.join(PROJECT_DIR, "..", "out", "arch", "arm64", "boot", "Image.gz")
            shutil.copy2(image_path, os.path.join(ak_dir, "Image.gz"))
            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(ak_dir):
                    for file in files:
                        abs_path = os.path.join(root, file)
                        rel_path = os.path.relpath(abs_path, ak_dir)
                        zipf.write(abs_path, rel_path)
        if not os.path.isfile(zip_path):
            return f"‚ùå –û—à–∏–±–∫–∞: zip-—Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω ({zip_name})"
        size_mb = os.path.getsize(zip_path) / (1024*1024)
        caption = f"–ì–æ—Ç–æ–≤—ã–π –∞—Ä—Ö–∏–≤ –¥–ª—è –ø—Ä–æ—à–∏–≤–∫–∏\n–Ø–¥—Ä–æ: {kernel_name}\n–†–∞–∑–º–µ—Ä: {size_mb:.2f} MB\n–î–∞—Ç–∞: {date_str}"
        with open(zip_path, "rb") as fzip:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=InputFile(fzip, filename=zip_name),
                caption=caption
            )
        return f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n–ò–º—è: {zip_name}\n–†–∞–∑–º–µ—Ä: {size_mb:.2f} MB"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø–∞–∫–æ–≤–∫–µ/–æ—Ç–ø—Ä–∞–≤–∫–µ zip")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø–∞–∫–æ–≤–∫–µ/–æ—Ç–ø—Ä–∞–≤–∫–µ zip: {e}"

async def stop_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global build_process
    if build_process and build_process.poll() is None:
        build_process.terminate()
        try:
            build_process.wait(timeout=10)
        except Exception:
            build_process.kill()
        build_process = None
        await update.message.reply_text("‚õîÔ∏è *–°–±–æ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É!*", parse_mode='Markdown')
        send_to_esp8266("Build Stopped!")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–±–æ—Ä–∫–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", parse_mode='Markdown')

async def list_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logs = sorted(os.listdir(LOG_DIR), reverse=True)
        if not logs:
            await update.message.reply_text("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        response = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏:*\n"
        for log in logs[:5]:
            size = os.path.getsize(os.path.join(LOG_DIR, log)) / 1024
            response += f"- `{log}` ({size:.1f} KB)\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤: {e}")

async def clean_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logs = sorted(os.listdir(LOG_DIR))
        if len(logs) <= MAX_LOG_FILES:
            await update.message.reply_text(f"–•—Ä–∞–Ω–∏—Ç—Å—è {len(logs)} –ª–æ–≥–æ–≤ (–º–∞–∫—Å–∏–º—É–º {MAX_LOG_FILES}), –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return
            
        deleted = 0
        for log in logs[:-MAX_LOG_FILES]:
            os.remove(os.path.join(LOG_DIR, log))
            deleted += 1
            
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {MAX_LOG_FILES} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")

async def system_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        esp_online, esp_status = check_esp8266_status()
        
        cpu_usage = psutil.cpu_percent()
        mem = psutil.virtual_memory()
        uptime = subprocess.check_output(["uptime"]).decode().strip()
        
        status_msg = (
            f"üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n\n"
            f"*ESP8266:* {esp_status}\n"
            f"*CPU:* {cpu_usage}%\n"
            f"*Memory:* {mem.percent}% used\n"
            f"*Uptime:* {uptime.split(',')[0]}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SD-–∫–∞—Ä—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ESP8266 –≤–∫–ª—é—á–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if ESP_ENABLED and esp_online:
            try:
                resp = requests.get(f"http://{ESP_IP}/sdinfo", timeout=3)
                if resp.ok:
                    log_size = None
                    for line in resp.text.split("\n"):
                        if line.startswith("log_size="):
                            log_size = int(line.split("=",1)[-1])
                    if log_size is not None:
                        status_msg += f"\n*–õ–æ–≥ –Ω–∞ SD:* {log_size} –±–∞–π—Ç"
            except:
                pass
        
        await update.message.reply_text(status_msg, parse_mode='Markdown')
        send_to_esp8266("Status Checked")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...*", parse_mode='Markdown')
    send_to_esp8266("Restarting...")
    os.execv(__file__, sys.argv)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "*/build* - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É —è–¥—Ä–∞\n"
        "*/status* - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "*/logs* - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤\n"
        "*/getlog <–∏–º—è_–ª–æ–≥–∞>* - –°–∫–∞—á–∞—Ç—å –ª–æ–≥ –ø–æ –∏–º–µ–Ω–∏\n"
        "*/clean* - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏\n"
        "*/restart* - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "*/stopbuild* - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä–∫—É\n"
        "*/lastzip* - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ö–∏–≤ –ø—Ä–æ—à–∏–≤–∫–∏\n"
        "*/buildinfo* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–±–æ—Ä–∫–µ\n"
        "*/patchlist* - –°–ø–∏—Å–æ–∫ –ø–∞—Ç—á–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏\n"
        "*/help* - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    if ESP_ENABLED:
        help_text += "\n\n*–ö–æ–º–∞–Ω–¥—ã ESP8266:*\n"
        help_text += "*/lsd* - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ SD-–∫–∞—Ä—Ç–µ\n"
        help_text += "*/getfile <–∏–º—è>* - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å SD-–∫–∞—Ä—Ç—ã\n"
        help_text += "*/deletefile <–∏–º—è>* - –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ SD-–∫–∞—Ä—Ç–µ\n"
        help_text += "*/uploadfile* - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ SD-–∫–∞—Ä—Ç—É\n"
        help_text += "*/clearlog* - –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥ –Ω–∞ SD-–∫–∞—Ä—Ç–µ\n"
        help_text += "*/sdinfo* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SD-–∫–∞—Ä—Ç–µ\n"
        help_text += "*/setlogname <–∏–º—è>* - –°–º–µ–Ω–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞\n"
        help_text += "*/rebootesp* - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å ESP8266\n"
        help_text += "*/webui* - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ESP8266"
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

# ESP8266 —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ESP –≤–∫–ª—é—á–µ–Ω)
async def getlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ESP_ENABLED:
        await update.message.reply_text("ESP8266 –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    try:
        url = f"http://{ESP_IP}/log"
        resp = requests.get(url, timeout=5)
        if resp.status_code == 200:
            log_text = resp.text
            if not log_text.strip():
                await update.message.reply_text("–õ–æ–≥ –Ω–∞ SD-–∫–∞—Ä—Ç–µ –ø—É—Å—Ç.")
            elif len(log_text) > 4000:
                with open("log.txt", "w") as f:
                    f.write(log_text)
                with open("log.txt", "rb") as f:
                    await update.message.reply_document(f, filename="log.txt", caption="–õ–æ–≥ —Å SD-–∫–∞—Ä—Ç—ã ESP8266")
            else:
                await update.message.reply_text(f"–õ–æ–≥ —Å SD-–∫–∞—Ä—Ç—ã:\n\n{log_text}")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–∞ —Å ESP8266.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def lsd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ESP_ENABLED:
        await update.message.reply_text("ESP8266 –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    try:
        url = f"http://{ESP_IP}/ls"
        resp = requests.get(url, timeout=5)
        if resp.ok:
            await update.message.reply_text(f"–§–∞–π–ª—ã –Ω–∞ SD:\n{resp.text}")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def getfile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ESP_ENABLED:
        await update.message.reply_text("ESP8266 –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∏–º—è —Ñ–∞–π–ª–∞: /getfile <–∏–º—è>")
        return
    fname = context.args[0]
    url = f"http://{ESP_IP}/download?file={fname}"
    try:
        resp = requests.get(url, timeout=10)
        if resp.ok:
            with open(fname, "wb") as f:
                f.write(resp.content)
            with open(fname, "rb") as f:
                await update.message.reply_document(f, filename=fname)
        else:
            await update.message.reply_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ SD.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def deletefile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ESP_ENABLED:
        await update.message.reply_text("ESP8266 –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∏–º—è —Ñ–∞–π–ª–∞: /deletefile <–∏–º—è>")
        return
    fname = context.args[0]
    url = f"http://{ESP_IP}/delete?file={fname}"
    try:
        resp = requests.get(url, timeout=5)
        if resp.ok:
            await update.message.reply_text(f"–§–∞–π–ª {fname} —É–¥–∞–ª—ë–Ω.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def uploadfile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ESP_ENABLED:
        await update.message.reply_text("ESP8266 –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    if not update.message.document:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ SD-–∫–∞—Ä—Ç—É.")
        return
    file = await update.message.document.get_file()
    fname = update.message.document.file_name
    file_bytes = await file.download_as_bytearray()
    url = f"http://{ESP_IP}/upload"
    try:
        resp = requests.post(url, data=file_bytes, params={"file": fname}, timeout=10)
        if resp.ok:
            await update.message.reply_text(f"–§–∞–π–ª {fname} –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ SD-–∫–∞—Ä—Ç—É.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def clearlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ESP_ENABLED:
        await update.message.reply_text("ESP8266 –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    url = f"http://{ESP_IP}/clearlog"
    try:
        resp = requests.get(url, timeout=5)
        if resp.ok:
            await update.message.reply_text("–õ–æ–≥ –æ—á–∏—â–µ–Ω.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–∞.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def sdinfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ESP_ENABLED:
        await update.message.reply_text("ESP8266 –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    url = f"http://{ESP_IP}/sdinfo"
    try:
        resp = requests.get(url, timeout=5)
        if resp.ok:
            await update.message.reply_text(f"SD info:\n{resp.text}")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ SD.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def setlogname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ESP_ENABLED:
        await update.message.reply_text("ESP8266 –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∏–º—è —Ñ–∞–π–ª–∞: /setlogname <–∏–º—è>")
        return
    fname = context.args[0]
    url = f"http://{ESP_IP}/setlogname?name={fname}"
    try:
        resp = requests.get(url, timeout=5)
        if resp.ok:
            await update.message.reply_text(f"–ò–º—è –ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {fname}.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–º–µ–Ω–∏ –ª–æ–≥–∞.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def rebootesp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ESP_ENABLED:
        await update.message.reply_text("ESP8266 –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    url = f"http://{ESP_IP}/reboot"
    try:
        resp = requests.get(url, timeout=5)
        if resp.ok:
            await update.message.reply_text("ESP8266 –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ ESP.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def webui(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ESP_ENABLED:
        await update.message.reply_text("ESP8266 –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    await update.message.reply_text(f"–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ESP8266: http://{ESP_IP}/webui")

async def get_last_zip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ö–∏–≤ –ø—Ä–æ—à–∏–≤–∫–∏"""
    try:
        zips_dir = os.path.join(PROJECT_DIR, "zips")
        if not os.path.exists(zips_dir):
            await update.message.reply_text("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∞—Ä—Ö–∏–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        zip_files = [f for f in os.listdir(zips_dir) if f.endswith('.zip')]
        if not zip_files:
            await update.message.reply_text("–ê—Ä—Ö–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        zip_files.sort(key=lambda x: os.path.getctime(os.path.join(zips_dir, x)), reverse=True)
        latest_zip = zip_files[0]
        zip_path = os.path.join(zips_dir, latest_zip)
        
        size_mb = os.path.getsize(zip_path) / (1024*1024)
        created_time = datetime.fromtimestamp(os.path.getctime(zip_path))
        
        caption = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ö–∏–≤:\n–ò–º—è: {latest_zip}\n–†–∞–∑–º–µ—Ä: {size_mb:.2f} MB\n–°–æ–∑–¥–∞–Ω: {created_time.strftime('%Y-%m-%d %H:%M:%S')}"
        
        with open(zip_path, "rb") as f:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=InputFile(f, filename=latest_zip),
                caption=caption
            )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")

async def get_build_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö  —Å–±–æ—Ä–∫–∞—Ö"""
    try:
        logs = sorted(os.listdir(LOG_DIR), reverse=True)
        if not logs:
            await update.message.reply_text("–õ–æ–≥–∏ —Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        repo = Repo(PROJECT_DIR)
        commit = repo.head.commit.hexsha[:8]
        branch = repo.active_branch.name
        response = f"\U0001F4CB *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–±–æ—Ä–∫–∞—Ö*\n\n–¢–µ–∫—É—â–∏–π git: `{branch}` `{commit}`\n\n"
        for log_name in logs[:3]:
            log_path = os.path.join(LOG_DIR, log_name)
            with open(log_path, 'r') as f:
                lines = f.readlines()
            kernel_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            build_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            for line in lines:
                if "Using kernel name:" in line:
                    kernel_name = line.split(":", 1)[-1].strip()
                elif "Kernel image:" in line:
                    build_status = "–£—Å–ø–µ—à–Ω–æ"
                elif "Build failed" in line or "error" in line.lower():
                    build_status = "–û—à–∏–±–∫–∞"
            created_time = datetime.fromtimestamp(os.path.getctime(log_path))
            build_time = created_time.strftime('%Y-%m-%d %H:%M:%S')
            size_kb = os.path.getsize(log_path) / 1024
            # –ü–æ–∏—Å–∫ zip-–∞—Ä—Ö–∏–≤–∞
            zip_name = None
            zip_size = None
            if kernel_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                zips_dir = os.path.join(PROJECT_DIR, "zips")
                if os.path.isdir(zips_dir):
                    for f in os.listdir(zips_dir):
                        if kernel_name in f and f.endswith('.zip'):
                            zip_name = f
                            zip_size = os.path.getsize(os.path.join(zips_dir, f)) / 1024 / 1024
                            break
            response += (
                f"*–Ø–¥—Ä–æ:* {kernel_name}\n"
                f"*–°—Ç–∞—Ç—É—Å:* {build_status}\n"
                f"*–í—Ä–µ–º—è:* {build_time}\n"
                f"*–õ–æ–≥:* `{log_name}` ({size_kb:.1f} KB)\n"
            )
            if zip_name:
                response += f"*–ê—Ä—Ö–∏–≤:* `{zip_name}` ({zip_size:.2f} MB)\n"
            response += "\n"
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—Ä–∫–∞—Ö: {e}")

async def list_patches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—á–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏"""
    try:
        patches_dir = os.path.join(PROJECT_DIR, "patches")
        if not os.path.exists(patches_dir):
            await update.message.reply_text("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ø–∞—Ç—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        patch_files = [f for f in os.listdir(patches_dir) if f.endswith('.patch')]
        if not patch_files:
            await update.message.reply_text("–ü–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
        patch_files.sort()
        
        response = "üìù *–°–ø–∏—Å–æ–∫ –ø–∞—Ç—á–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏:*\n\n"
        for i, patch in enumerate(patch_files[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            size_kb = os.path.getsize(os.path.join(patches_dir, patch)) / 1024
            response += f"{i}. `{patch}` ({size_kb:.1f} KB)\n"
        
        if len(patch_files) > 10:
            response += f"\n... –∏ –µ—â–µ {len(patch_files) - 10} –ø–∞—Ç—á–µ–π"
        
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ç—á–µ–π: {e}")

async def getlogfile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∏–º—è –ª–æ–≥–∞: /getlog <–∏–º—è_–ª–æ–≥–∞>")
        return
    log_name = context.args[0]
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, -, _, .
    import re
    if not re.match(r'^[\w\-.]+$', log_name):
        await update.message.reply_text("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞.")
        return
    log_path = os.path.join(LOG_DIR, log_name)
    if not os.path.isfile(log_path):
        await update.message.reply_text("–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        with open(log_path, "rb") as f:
            await update.message.reply_document(f, filename=log_name)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")

def main():
    application = ApplicationBuilder() \
        .token(BOT_TOKEN) \
        .post_init(setup_commands) \
        .build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("build", build_kernel))
    application.add_handler(CommandHandler("status", system_status))
    application.add_handler(CommandHandler("logs", list_logs))
    application.add_handler(CommandHandler("clean", clean_logs))
    application.add_handler(CommandHandler("restart", restart_bot))  
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stopbuild", stop_build))
    application.add_handler(CommandHandler("lastzip", get_last_zip))
    application.add_handler(CommandHandler("buildinfo", get_build_info))
    application.add_handler(CommandHandler("patchlist", list_patches))
    application.add_handler(CommandHandler("getlog", getlogfile))
    
    # ESP8266 –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ESP –≤–∫–ª—é—á–µ–Ω)
    if ESP_ENABLED:
        application.add_handler(CommandHandler("getlog", getlog))
        application.add_handler(CommandHandler("lsd", lsd))
        application.add_handler(CommandHandler("getfile", getfile))
        application.add_handler(CommandHandler("deletefile", deletefile))
        application.add_handler(CommandHandler("uploadfile", uploadfile))
        application.add_handler(CommandHandler("clearlog", clearlog))
        application.add_handler(CommandHandler("sdinfo", sdinfo))
        application.add_handler(CommandHandler("setlogname", setlogname))
        application.add_handler(CommandHandler("rebootesp", rebootesp))
        application.add_handler(CommandHandler("webui", webui))
    
    logger.info(f"Bot starting... ESP8266: {'enabled' if ESP_ENABLED else 'disabled'}")
    send_to_esp8266("Bot Starting")
    
    application.run_polling()

if __name__ == "__main__":
    import sys
    main()
